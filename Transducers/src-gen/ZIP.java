// DO NOT EDIT THIS FILE! IT IS AUTOMATICALLY GENERATED FROM FILE "src/ZIP.gold"
import gold.*;
import gold.structures.*;
import gold.structures.automaton.*;
import gold.structures.bag.*;
import gold.structures.collection.*;
import gold.structures.deque.*;
import gold.structures.disjointset.*;
import gold.structures.graph.*;
import gold.structures.heap.*;
import gold.structures.list.*;
import gold.structures.map.*;
import gold.structures.multimap.*;
import gold.structures.point.*;
import gold.structures.queue.*;
import gold.structures.set.*;
import gold.structures.stack.*;
import gold.structures.tree.*;
import gold.structures.tree.binary.*;
import gold.structures.tree.nary.*;
import gold.structures.tuple.*;
import gold.structures.turingMachine.*;
import gold.swing.*;
import gold.swing.icon.*;
import gold.swing.icon.ajaxload.*;
import gold.swing.icon.famfamfam.*;
import gold.swing.icon.gold.*;
import gold.swing.icon.jlfgr.*;
import gold.swing.icon.wikimedia.*;
import gold.swing.icon.windows.*;
import gold.swing.look.*;
import gold.swing.util.*;
import gold.test.*;
import gold.test.automaton.*;
import gold.test.general.*;
import gold.test.graph.*;
import gold.util.*;
import gold.visualization.*;
import gold.visualization.automaton.*;
import gold.visualization.graph.*;
import gold.visualization.quadtree.*;
import gold.visualization.turingMachine.*;
import gold.visualization.util.*;
import java.lang.*;
import org.apfloat.*;
import static gold.util.GReflection.*;
@SuppressWarnings("all")
public final class ZIP {
  static {
    gold.swing.util.GUtilities.installGoldLookAndFeel();
  }
  public static Object A=null;
  public static void main(String[] args) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=24;
      if ($opEqualY($invokeField("length",args),0)) {
        $line=24;
        A=$fix($opIntvlY('a','c'));
      }
      else {
        $line=26;
        gold.structures.set.ISet $v1=$newSet();
        int $v3=$int(0);
        int $v4=$int($invokeMethod("length",((java.lang.String[])args)[$int(0)],new Object[]{}))-1;
        $v2:for (int i=$v3; i<=$v4; i++) {
          $v1.add($invokeMethod("charAt",((java.lang.String[])args)[$int(0)],new Object[]{i}));
        }
        A=$fix($opDiffeY($v1,GCollections.asSet('$')));
      }
      $line=30;
      Object coder=$fix(ZIP.createCoder());
      $line=31;
      Object decoder=$fix(ZIP.createDecoder());
      $line=33;
      Utilities.testCodeDecode($cast(gold.structures.automaton.ITransducer.class,coder),$cast(gold.structures.automaton.ITransducer.class,decoder));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"main",$line);
    }
  }
  public static ITransducer createCoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=39;
      gold.structures.set.ISet $v5=$newSet();
      $v6:for (Object letter:GCollections.unmodifiableCollection(A)) {
        int $v7=$int(1);
        int $v8=$int(5);
        for (int count=$v7; count<=$v8; count++) {
          $v5.add(GCollections.asList(letter,count));
        }
      }
      Object Q=$fix($opUnionY($v5,GCollections.asSet("I","F")));
      $line=40;
      Object \u03A3=$fix($opUnionY(A,GCollections.asSet('$')));
      $line=41;
      Object \u03A3_=$fix($opUnionY($opUnionY(A,$opIntvlY('2','5')),GCollections.asSet('$')));
      $line=42;
      Object q_0=$fix("I");
      $line=43;
      Object F=$fix(GCollections.asSet("F"));
      $line=44;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,\u03A3_,q_0,F,new GMethod(ZIP.class,"\u03B4"),new GMethod(ZIP.class,"g"),new GMethod(ZIP.class,"h")});
      if (true) break $try;
      $line=45;
      $rethrow(new RuntimeException("The function \"createCoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"createCoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B4(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=48;
      if ($opEqualY(q,"F")) {
        $line=49;
        $result="F";
        if (true) break $try;
      }
      else {
        $line=50;
        if ($opEqualY(\u03C3,'$')) {
          $line=51;
          $result="F";
          if (true) break $try;
        }
        else {
          $line=53;
          $result=GCollections.asList(\u03C3,1);
          if (true) break $try;
        }
      }
      $line=55;
      $rethrow(new RuntimeException("The function \"\u03B4(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object \u03B4(java.lang.Iterable $v9, Object a) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v10=GCollections.unmodifiableCollection($v9).iterator();
      Object s=$v10.next();
      Object c=$v10.next();
      $line=58;
      if ($opEqualY(a,'$')) {
        $line=59;
        $result="F";
        if (true) break $try;
      }
      else {
        $line=60;
        if (($bool($opEqualY(a,s))&&$bool($opLesstY(c,5)))) {
          $line=61;
          $result=GCollections.asList(a,$opAdditY(c,1));
          if (true) break $try;
        }
        else {
          $line=63;
          $result=GCollections.asList(a,1);
          if (true) break $try;
        }
      }
      $line=65;
      $rethrow(new RuntimeException("The function \"\u03B4(\u27E8s,c\u27E9:java.lang.Iterable,a:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"\u03B4",$line);
    }
    return $result;
  }
  public static Object g(Object q) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=69;
      $result="";
      if (true) break $try;
      $line=70;
      $rethrow(new RuntimeException("The function \"g(q:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"g",$line);
    }
    return $result;
  }
  public static Object h(Object q, Object \u03C3) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=73;
      if (($opEqualY(q,"I")&&$opEqualY(\u03C3,'$'))) {
        $line=73;
        $result=\u03C3;
        if (true) break $try;
      }
      else {
        $line=75;
        $result="";
        if (true) break $try;
      }
      $line=78;
      $rethrow(new RuntimeException("The function \"h(q:Object,\u03C3:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"h",$line);
    }
    return $result;
  }
  public static Object h(java.lang.Iterable $v11, Object a) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v12=GCollections.unmodifiableCollection($v11).iterator();
      Object s=$v12.next();
      Object c=$v12.next();
      $line=82;
      if (($opEqualY(a,'$')&&$opEqualY(c,1))) {
        $line=83;
        $result=$opAdditY(s,"$");
        if (true) break $try;
      }
      else {
        $line=84;
        if ($opEqualY(a,'$')) {
          $line=85;
          $result=$opAdditY($opAdditY($invokeMethod(String.class,"valueOf",true,null,new Object[]{s}),$invokeMethod(String.class,"valueOf",true,null,new Object[]{c})),"$");
          if (true) break $try;
        }
        else {
          $line=86;
          if (($bool($opEqualY(a,s))&&$bool($opLesstY(c,5)))) {
            $line=87;
            $result="";
            if (true) break $try;
          }
          else {
            $line=88;
            if ($opEqualY(c,1)) {
              $line=89;
              $result=s;
              if (true) break $try;
            }
            else {
              $line=90;
              $result=$opAdditY($invokeMethod(String.class,"valueOf",true,null,new Object[]{s}),$invokeMethod(String.class,"valueOf",true,null,new Object[]{c}));
              if (true) break $try;
            }
          }
        }
      }
      $line=93;
      $rethrow(new RuntimeException("The function \"h(\u27E8s,c\u27E9:java.lang.Iterable,a:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"h",$line);
    }
    return $result;
  }
  public static ITransducer createDecoder() {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=96;
      Object Q=$fix($opUnionY($opUnionY(GCollections.asSet("I","F","E"),A),$opCartsY(new Object[]{A,GCollections.asSet(1)})));
      $line=97;
      Object \u03A3=$fix($opUnionY($opUnionY(A,$opIntvlY('2','5')),GCollections.asSet('$')));
      $line=98;
      Object \u03A3_=$fix($opUnionY(A,GCollections.asSet('$')));
      $line=99;
      Object q_0=$fix("I");
      $line=100;
      Object F=$fix(GCollections.asSet("F"));
      $line=101;
      $result=$invokeConstructor(GDeterministicTransducer.class,new Object[]{Q,\u03A3,\u03A3_,q_0,F,new GMethod(ZIP.class,"\u03B41"),new GMethod(ZIP.class,"g"),new GMethod(ZIP.class,"h1")});
      if (true) break $try;
      $line=102;
      $rethrow(new RuntimeException("The function \"createDecoder()\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"createDecoder",$line);
    }
    return $cast(ITransducer.class,$result);
  }
  public static Object \u03B41(Object q, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=105;
      if ($opMembrY(q,GCollections.asSet("E","F"))) {
        $line=105;
        $result="E";
        if (true) break $try;
      }
      else {
        $line=106;
        if ($opEqualY(s,'$')) {
          $line=106;
          $result="F";
          if (true) break $try;
        }
        else {
          $line=107;
          if (($opEqualY(q,"I")&&$opMembrY(s,$opIntvlY('2','5')))) {
            $line=107;
            $result="E";
            if (true) break $try;
          }
          else {
            $line=108;
            if ($opEqualY(q,"I")) {
              $line=108;
              $result=s;
              if (true) break $try;
            }
            else {
              $line=110;
              if (($opMembrY(q,A)&&$opMembrY(s,$opIntvlY('2','4')))) {
                $line=110;
                $result=GCollections.asList(q,1);
                if (true) break $try;
              }
              else {
                $line=111;
                if (($opMembrY(q,A)&&$opEqualY(s,'5'))) {
                  $line=111;
                  $result="I";
                  if (true) break $try;
                }
                else {
                  $line=112;
                  if (($opMembrY(q,A)&&$opEqualY(s,q))) {
                    $line=112;
                    $result="E";
                    if (true) break $try;
                  }
                  else {
                    $line=113;
                    $result=s;
                    if (true) break $try;
                  }
                }
              }
            }
          }
        }
      }
      $line=115;
      $rethrow(new RuntimeException("The function \"\u03B41(q:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object \u03B41(java.lang.Iterable $v13, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      java.util.Iterator $v14=GCollections.unmodifiableCollection($v13).iterator();
      Object q=$v14.next();
      Object x=$v14.next();
      $line=118;
      if ($opEqualY(s,'$')) {
        $line=118;
        $result="F";
        if (true) break $try;
      }
      else {
        $line=119;
        if ($opMembrY(s,$opIntvlY('2','5'))) {
          $line=119;
          $result="E";
          if (true) break $try;
        }
        else {
          $line=120;
          if ($opEqualY(s,q)) {
            $line=120;
            $result="E";
            if (true) break $try;
          }
          else {
            $line=121;
            $result=s;
            if (true) break $try;
          }
        }
      }
      $line=123;
      $rethrow(new RuntimeException("The function \"\u03B41(\u27E8q,x\u27E9:java.lang.Iterable,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"\u03B41",$line);
    }
    return $result;
  }
  public static Object h1(Object q, Object s) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=128;
      if (($opEqualY(q,"F")||$opEqualY(q,"E"))) {
        $line=128;
        $result="";
        if (true) break $try;
      }
      else {
        $line=129;
        if (($opEqualY(s,'$')&&$opMembrY(q,A))) {
          $line=129;
          $result=$opAdditY(q,"$");
          if (true) break $try;
        }
        else {
          $line=130;
          if ($opEqualY(s,'$')) {
            $line=130;
            $result="$";
            if (true) break $try;
          }
          else {
            $line=131;
            if (($opMembrY(s,$opUnionY(A,GCollections.asSet('$')))&&$opMembrY(q,A))) {
              $line=131;
              $result=q;
              if (true) break $try;
            }
            else {
              $line=132;
              if (($opMembrY(s,$opIntvlY('2','5'))&&$opMembrY(q,A))) {
                $line=132;
                $result=ZIP.starN(q,$opSubtrY(s,'0'));
                if (true) break $try;
              }
              else {
                $line=133;
                $result="";
                if (true) break $try;
              }
            }
          }
        }
      }
      $line=135;
      $rethrow(new RuntimeException("The function \"h1(q:Object,s:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"h1",$line);
    }
    return $result;
  }
  public static Object starN(Object c, Object n) {
    int $line=0;
    Object $result=null;
    $try:try {
      $line=140;
      if ($opEqualY(n,0)) {
        $line=140;
        $result="";
        if (true) break $try;
      }
      else {
        $line=141;
        $result=$opAdditY($invokeMethod(String.class,"valueOf",true,null,new Object[]{c}),ZIP.starN(c,$opSubtrY(n,1)));
        if (true) break $try;
      }
      $line=143;
      $rethrow(new RuntimeException("The function \"starN(c:Object,n:Object)\" did not return a value."));
    }
    catch (Throwable $throwable) {
      $rethrow($throwable,ZIP.class,"starN",$line);
    }
    return $result;
  }
}
